/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"
#include <string.h>

UART_HandleTypeDef huart2;
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
GPIO_InitTypeDef GPIO_InitStruct;

volatile uint8_t button1_pressed = 0;
volatile uint8_t button2_pressed = 0;

uint8_t display_values[2] = {0, 0}; // Valores a mostrar en los displays
char uart_rx_buffer[10]; // Buffer para almacenar los datos recibidos por UART

void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_USART2_UART_Init(void);
void MX_ADC1_Init(void);
void MX_ADC2_Init(void);
void update_display(uint8_t display_num, uint8_t value);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == GPIO_PIN_0) {  // Botón 1
        button1_pressed = 1;
    } else if (GPIO_Pin == GPIO_PIN_1) {  // Botón 2
        button2_pressed = 1;
    }
}

void send_uart_message(char *message) {
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
}

// Función para recibir datos por UART (bloqueante)
void receive_uart_data() {
    HAL_UART_Receive(&huart2, (uint8_t *)uart_rx_buffer, sizeof(uart_rx_buffer) - 1, HAL_MAX_DELAY);
    uart_rx_buffer[9] = '\0'; // Asegurar el término de la cadena
}

// Función para convertir valores de 0-F a un patrón de 7 segmentos
uint8_t hex_to_7seg(uint8_t hex_value) {
    const uint8_t segment_map[16] = {
        0x3F,  // 0
        0x06,  // 1
        0x5B,  // 2
        0x4F,  // 3
        0x66,  // 4
        0x6D,  // 5
        0x7D,  // 6
        0x07,  // 7
        0x7F,  // 8
        0x6F,  // 9
        0x77,  // A
        0x7C,  // B
        0x39,  // C
        0x5E,  // D
        0x79,  // E
        0x71   // F
    };
    return segment_map[hex_value];
}

// Función para actualizar el display
void update_display(uint8_t display_num, uint8_t value) {
    // Apagar ambos displays
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // Display 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  // Display 2

    // Convertir valor a segmentos y encender los pines correspondientes
    uint8_t segment_value = hex_to_7seg(value);

    // Encender los segmentos del display (simulado)
    // Ejemplo: GPIO_WritePin(segment_pin_a, (segment_value & 0x01));
    // Repite esto para todos los segmentos a-g

    // Activar el display correspondiente
    if (display_num == 0) {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // Display 1 activo
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);  // Display 2 activo
    }
}

// Función para convertir decimal a hexadecimal y desplegar en los 7 segmentos
void display_rx_value(uint32_t adc_value, uint8_t display_num) {
    uint8_t hex_value = adc_value & 0xF;  // Tomar solo los 4 bits menos significativos
    update_display(display_num, hex_value);  // Actualizar display correspondiente
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_ADC1_Init();
    MX_ADC2_Init();

    char msg[50];
    uint32_t adc_value = 0;

    while (1) {
        if (button1_pressed) {
            // Leer datos del ESP32 para el Sensor 1
            receive_uart_data();
            adc_value = atoi(uart_rx_buffer);  // Convertir cadena a entero
            display_rx_value(adc_value, 0);    // Mostrar el valor en el display 1
            sprintf(msg, "Sensor 1 UART Value: %lu\n", adc_value);
            send_uart_message(msg);
            button1_pressed = 0;
        }

        if (button2_pressed) {
            // Leer datos del ESP32 para el Sensor 2
            receive_uart_data();
            adc_value = atoi(uart_rx_buffer);  // Convertir cadena a entero
            display_rx_value(adc_value, 1);    // Mostrar el valor en el display 2
            sprintf(msg, "Sensor 2 UART Value: %lu\n", adc_value);
            send_uart_message(msg);
            button2_pressed = 0;
        }

        // Multiplexar los displays
        for (uint8_t i = 0; i < 2; i++) {
            update_display(i, display_values[i]);
            HAL_Delay(5);  // Pequeño retardo para hacer el multiplexado
        }
    }
}

// Inicialización de periféricos (GPIO, UART, ADC)
void MX_GPIO_Init(void) {
    // Configuración para botones e interrupciones ya realizada
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Habilitar reloj para el puerto de los displays

    // Configurar pines para los displays de 7 segmentos y transistores
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;  // Pines para los transistores de los displays
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    // Pines para los segmentos (a-g)
    // Asegúrate de configurar correctamente los pines GPIO para cada segmento del display
}

void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart2);
}

void MX_ADC1_Init(void) {
    __HAL_RCC_ADC1_CLK_ENABLE();
    hadc1.Instance = ADC1;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    HAL_ADC_Init(&hadc1);
}

void MX_ADC2_Init(void) {
    __HAL_RCC_ADC2_CLK_ENABLE();
    hadc2.Instance = ADC2;
    hadc2.Init.Resolution = ADC_RESOLUTION_12B;
    hadc2.Init.ContinuousConvMode = DISABLE;
    hadc2.Init.DiscontinuousConvMode = DISABLE;
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    HAL_ADC_Init(&hadc2);
}

void SystemClock_Config(void) {
    // Configuración del reloj (dependiente del sistema)
}
